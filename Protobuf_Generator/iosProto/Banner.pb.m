// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Banner.pb.h"

@implementation BannerRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [BannerRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface MFocus ()
@property (retain) NSString* id;
@property (retain) NSString* img;
@property int32_t type;
@property (retain) NSString* fid;
@property (retain) NSString* url;
@end

@implementation MFocus

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) _value {
  hasId_ = !!_value;
}
@synthesize id;
- (BOOL) hasImg {
  return !!hasImg_;
}
- (void) setHasImg:(BOOL) _value {
  hasImg_ = !!_value;
}
@synthesize img;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) _value {
  hasType_ = !!_value;
}
@synthesize type;
- (BOOL) hasFid {
  return !!hasFid_;
}
- (void) setHasFid:(BOOL) _value {
  hasFid_ = !!_value;
}
@synthesize fid;
- (BOOL) hasUrl {
  return !!hasUrl_;
}
- (void) setHasUrl:(BOOL) _value {
  hasUrl_ = !!_value;
}
@synthesize url;
- (void) dealloc {
  self.id = nil;
  self.img = nil;
  self.fid = nil;
  self.url = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.id = @"";
    self.img = @"";
    self.type = 0;
    self.fid = @"";
    self.url = @"";
  }
  return self;
}
static MFocus* defaultMFocusInstance = nil;
+ (void) initialize {
  if (self == [MFocus class]) {
    defaultMFocusInstance = [[MFocus alloc] init];
  }
}
+ (MFocus*) defaultInstance {
  return defaultMFocusInstance;
}
- (MFocus*) defaultInstance {
  return defaultMFocusInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeString:1 value:self.id];
  }
  if (self.hasImg) {
    [output writeString:2 value:self.img];
  }
  if (self.hasType) {
    [output writeInt32:3 value:self.type];
  }
  if (self.hasFid) {
    [output writeString:4 value:self.fid];
  }
  if (self.hasUrl) {
    [output writeString:5 value:self.url];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasId) {
    size += computeStringSize(1, self.id);
  }
  if (self.hasImg) {
    size += computeStringSize(2, self.img);
  }
  if (self.hasType) {
    size += computeInt32Size(3, self.type);
  }
  if (self.hasFid) {
    size += computeStringSize(4, self.fid);
  }
  if (self.hasUrl) {
    size += computeStringSize(5, self.url);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MFocus*) parseFromData:(NSData*) data {
  return (MFocus*)[[[MFocus builder] mergeFromData:data] build];
}
+ (MFocus*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MFocus*)[[[MFocus builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MFocus*) parseFromInputStream:(NSInputStream*) input {
  return (MFocus*)[[[MFocus builder] mergeFromInputStream:input] build];
}
+ (MFocus*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MFocus*)[[[MFocus builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MFocus*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MFocus*)[[[MFocus builder] mergeFromCodedInputStream:input] build];
}
+ (MFocus*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MFocus*)[[[MFocus builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MFocus_Builder*) builder {
  return [[[MFocus_Builder alloc] init] autorelease];
}
+ (MFocus_Builder*) builderWithPrototype:(MFocus*) prototype {
  return [[MFocus builder] mergeFrom:prototype];
}
- (MFocus_Builder*) builder {
  return [MFocus builder];
}
@end

@interface MFocus_Builder()
@property (retain) MFocus* protobufBuilderResult;
@end

@implementation MFocus_Builder
@synthesize protobufBuilderResult;
- (void) dealloc {
  self.protobufBuilderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.protobufBuilderResult = [[[MFocus alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return protobufBuilderResult;
}
- (MFocus_Builder*) clear {
  self.protobufBuilderResult = [[[MFocus alloc] init] autorelease];
  return self;
}
- (MFocus_Builder*) clone {
  return [MFocus builderWithPrototype:protobufBuilderResult];
}
- (MFocus*) defaultInstance {
  return [MFocus defaultInstance];
}
- (MFocus*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MFocus*) buildPartial {
  MFocus* returnMe = [[protobufBuilderResult retain] autorelease];
  self.protobufBuilderResult = nil;
  return returnMe;
}
- (MFocus_Builder*) mergeFrom:(MFocus*) other {
  if (other == [MFocus defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasImg) {
    [self setImg:other.img];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasFid) {
    [self setFid:other.fid];
  }
  if (other.hasUrl) {
    [self setUrl:other.url];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MFocus_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MFocus_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setId:[input readString]];
        break;
      }
      case 18: {
        [self setImg:[input readString]];
        break;
      }
      case 24: {
        [self setType:[input readInt32]];
        break;
      }
      case 34: {
        [self setFid:[input readString]];
        break;
      }
      case 42: {
        [self setUrl:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return protobufBuilderResult.hasId;
}
- (NSString*) id {
  return protobufBuilderResult.id;
}
- (MFocus_Builder*) setId:(NSString*) _value {
  protobufBuilderResult.hasId = YES;
  protobufBuilderResult.id = _value;
  return self;
}
- (MFocus_Builder*) clearId {
  protobufBuilderResult.hasId = NO;
  protobufBuilderResult.id = @"";
  return self;
}
- (BOOL) hasImg {
  return protobufBuilderResult.hasImg;
}
- (NSString*) img {
  return protobufBuilderResult.img;
}
- (MFocus_Builder*) setImg:(NSString*) _value {
  protobufBuilderResult.hasImg = YES;
  protobufBuilderResult.img = _value;
  return self;
}
- (MFocus_Builder*) clearImg {
  protobufBuilderResult.hasImg = NO;
  protobufBuilderResult.img = @"";
  return self;
}
- (BOOL) hasType {
  return protobufBuilderResult.hasType;
}
- (int32_t) type {
  return protobufBuilderResult.type;
}
- (MFocus_Builder*) setType:(int32_t) _value {
  protobufBuilderResult.hasType = YES;
  protobufBuilderResult.type = _value;
  return self;
}
- (MFocus_Builder*) clearType {
  protobufBuilderResult.hasType = NO;
  protobufBuilderResult.type = 0;
  return self;
}
- (BOOL) hasFid {
  return protobufBuilderResult.hasFid;
}
- (NSString*) fid {
  return protobufBuilderResult.fid;
}
- (MFocus_Builder*) setFid:(NSString*) _value {
  protobufBuilderResult.hasFid = YES;
  protobufBuilderResult.fid = _value;
  return self;
}
- (MFocus_Builder*) clearFid {
  protobufBuilderResult.hasFid = NO;
  protobufBuilderResult.fid = @"";
  return self;
}
- (BOOL) hasUrl {
  return protobufBuilderResult.hasUrl;
}
- (NSString*) url {
  return protobufBuilderResult.url;
}
- (MFocus_Builder*) setUrl:(NSString*) _value {
  protobufBuilderResult.hasUrl = YES;
  protobufBuilderResult.url = _value;
  return self;
}
- (MFocus_Builder*) clearUrl {
  protobufBuilderResult.hasUrl = NO;
  protobufBuilderResult.url = @"";
  return self;
}
@end

@interface MFocusList ()
@property (retain) NSMutableArray* mutableListList;
@end

@implementation MFocusList

@synthesize mutableListList;
- (void) dealloc {
  self.mutableListList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static MFocusList* defaultMFocusListInstance = nil;
+ (void) initialize {
  if (self == [MFocusList class]) {
    defaultMFocusListInstance = [[MFocusList alloc] init];
  }
}
+ (MFocusList*) defaultInstance {
  return defaultMFocusListInstance;
}
- (MFocusList*) defaultInstance {
  return defaultMFocusListInstance;
}
- (NSArray*) listList {
  return mutableListList;
}
- (MFocus*) listAtIndex:(int32_t) index {
  id _value = [mutableListList objectAtIndex:index];
  return _value;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (MFocus* element in self.listList) {
    [output writeMessage:1 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (MFocus* element in self.listList) {
    size += computeMessageSize(1, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MFocusList*) parseFromData:(NSData*) data {
  return (MFocusList*)[[[MFocusList builder] mergeFromData:data] build];
}
+ (MFocusList*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MFocusList*)[[[MFocusList builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MFocusList*) parseFromInputStream:(NSInputStream*) input {
  return (MFocusList*)[[[MFocusList builder] mergeFromInputStream:input] build];
}
+ (MFocusList*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MFocusList*)[[[MFocusList builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MFocusList*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MFocusList*)[[[MFocusList builder] mergeFromCodedInputStream:input] build];
}
+ (MFocusList*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MFocusList*)[[[MFocusList builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MFocusList_Builder*) builder {
  return [[[MFocusList_Builder alloc] init] autorelease];
}
+ (MFocusList_Builder*) builderWithPrototype:(MFocusList*) prototype {
  return [[MFocusList builder] mergeFrom:prototype];
}
- (MFocusList_Builder*) builder {
  return [MFocusList builder];
}
@end

@interface MFocusList_Builder()
@property (retain) MFocusList* protobufBuilderResult;
@end

@implementation MFocusList_Builder
@synthesize protobufBuilderResult;
- (void) dealloc {
  self.protobufBuilderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.protobufBuilderResult = [[[MFocusList alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return protobufBuilderResult;
}
- (MFocusList_Builder*) clear {
  self.protobufBuilderResult = [[[MFocusList alloc] init] autorelease];
  return self;
}
- (MFocusList_Builder*) clone {
  return [MFocusList builderWithPrototype:protobufBuilderResult];
}
- (MFocusList*) defaultInstance {
  return [MFocusList defaultInstance];
}
- (MFocusList*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MFocusList*) buildPartial {
  MFocusList* returnMe = [[protobufBuilderResult retain] autorelease];
  self.protobufBuilderResult = nil;
  return returnMe;
}
- (MFocusList_Builder*) mergeFrom:(MFocusList*) other {
  if (other == [MFocusList defaultInstance]) {
    return self;
  }
  if (other.mutableListList.count > 0) {
    if (protobufBuilderResult.mutableListList == nil) {
      protobufBuilderResult.mutableListList = [NSMutableArray array];
    }
    [protobufBuilderResult.mutableListList addObjectsFromArray:other.mutableListList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MFocusList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MFocusList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        MFocus_Builder* subBuilder = [MFocus builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addList:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSArray*) listList {
  if (protobufBuilderResult.mutableListList == nil) { return [NSArray array]; }
  return protobufBuilderResult.mutableListList;
}
- (MFocus*) listAtIndex:(int32_t) index {
  return [protobufBuilderResult listAtIndex:index];
}
- (MFocusList_Builder*) replaceListAtIndex:(int32_t) index with:(MFocus*) _value {
  [protobufBuilderResult.mutableListList replaceObjectAtIndex:index withObject:_value];
  return self;
}
- (MFocusList_Builder*) addAllList:(NSArray*) values {
  if (protobufBuilderResult.mutableListList == nil) {
    protobufBuilderResult.mutableListList = [NSMutableArray array];
  }
  [protobufBuilderResult.mutableListList addObjectsFromArray:values];
  return self;
}
- (MFocusList_Builder*) clearListList {
  protobufBuilderResult.mutableListList = nil;
  return self;
}
- (MFocusList_Builder*) addList:(MFocus*) _value {
  if (protobufBuilderResult.mutableListList == nil) {
    protobufBuilderResult.mutableListList = [NSMutableArray array];
  }
  [protobufBuilderResult.mutableListList addObject:_value];
  return self;
}
@end

@interface MCate ()
@property (retain) NSString* id;
@property (retain) NSString* img;
@property (retain) NSString* name;
@property int32_t isHot;
@property int32_t count;
@property (retain) NSMutableArray* mutableListList;
@end

@implementation MCate

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) _value {
  hasId_ = !!_value;
}
@synthesize id;
- (BOOL) hasImg {
  return !!hasImg_;
}
- (void) setHasImg:(BOOL) _value {
  hasImg_ = !!_value;
}
@synthesize img;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) _value {
  hasName_ = !!_value;
}
@synthesize name;
- (BOOL) hasIsHot {
  return !!hasIsHot_;
}
- (void) setHasIsHot:(BOOL) _value {
  hasIsHot_ = !!_value;
}
@synthesize isHot;
- (BOOL) hasCount {
  return !!hasCount_;
}
- (void) setHasCount:(BOOL) _value {
  hasCount_ = !!_value;
}
@synthesize count;
@synthesize mutableListList;
- (void) dealloc {
  self.id = nil;
  self.img = nil;
  self.name = nil;
  self.mutableListList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.id = @"";
    self.img = @"";
    self.name = @"";
    self.isHot = 0;
    self.count = 0;
  }
  return self;
}
static MCate* defaultMCateInstance = nil;
+ (void) initialize {
  if (self == [MCate class]) {
    defaultMCateInstance = [[MCate alloc] init];
  }
}
+ (MCate*) defaultInstance {
  return defaultMCateInstance;
}
- (MCate*) defaultInstance {
  return defaultMCateInstance;
}
- (NSArray*) listList {
  return mutableListList;
}
- (MCate*) listAtIndex:(int32_t) index {
  id _value = [mutableListList objectAtIndex:index];
  return _value;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeString:1 value:self.id];
  }
  if (self.hasImg) {
    [output writeString:2 value:self.img];
  }
  if (self.hasName) {
    [output writeString:3 value:self.name];
  }
  if (self.hasIsHot) {
    [output writeInt32:4 value:self.isHot];
  }
  if (self.hasCount) {
    [output writeInt32:5 value:self.count];
  }
  for (MCate* element in self.listList) {
    [output writeMessage:6 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasId) {
    size += computeStringSize(1, self.id);
  }
  if (self.hasImg) {
    size += computeStringSize(2, self.img);
  }
  if (self.hasName) {
    size += computeStringSize(3, self.name);
  }
  if (self.hasIsHot) {
    size += computeInt32Size(4, self.isHot);
  }
  if (self.hasCount) {
    size += computeInt32Size(5, self.count);
  }
  for (MCate* element in self.listList) {
    size += computeMessageSize(6, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MCate*) parseFromData:(NSData*) data {
  return (MCate*)[[[MCate builder] mergeFromData:data] build];
}
+ (MCate*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MCate*)[[[MCate builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MCate*) parseFromInputStream:(NSInputStream*) input {
  return (MCate*)[[[MCate builder] mergeFromInputStream:input] build];
}
+ (MCate*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MCate*)[[[MCate builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MCate*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MCate*)[[[MCate builder] mergeFromCodedInputStream:input] build];
}
+ (MCate*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MCate*)[[[MCate builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MCate_Builder*) builder {
  return [[[MCate_Builder alloc] init] autorelease];
}
+ (MCate_Builder*) builderWithPrototype:(MCate*) prototype {
  return [[MCate builder] mergeFrom:prototype];
}
- (MCate_Builder*) builder {
  return [MCate builder];
}
@end

@interface MCate_Builder()
@property (retain) MCate* protobufBuilderResult;
@end

@implementation MCate_Builder
@synthesize protobufBuilderResult;
- (void) dealloc {
  self.protobufBuilderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.protobufBuilderResult = [[[MCate alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return protobufBuilderResult;
}
- (MCate_Builder*) clear {
  self.protobufBuilderResult = [[[MCate alloc] init] autorelease];
  return self;
}
- (MCate_Builder*) clone {
  return [MCate builderWithPrototype:protobufBuilderResult];
}
- (MCate*) defaultInstance {
  return [MCate defaultInstance];
}
- (MCate*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MCate*) buildPartial {
  MCate* returnMe = [[protobufBuilderResult retain] autorelease];
  self.protobufBuilderResult = nil;
  return returnMe;
}
- (MCate_Builder*) mergeFrom:(MCate*) other {
  if (other == [MCate defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasImg) {
    [self setImg:other.img];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasIsHot) {
    [self setIsHot:other.isHot];
  }
  if (other.hasCount) {
    [self setCount:other.count];
  }
  if (other.mutableListList.count > 0) {
    if (protobufBuilderResult.mutableListList == nil) {
      protobufBuilderResult.mutableListList = [NSMutableArray array];
    }
    [protobufBuilderResult.mutableListList addObjectsFromArray:other.mutableListList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MCate_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MCate_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setId:[input readString]];
        break;
      }
      case 18: {
        [self setImg:[input readString]];
        break;
      }
      case 26: {
        [self setName:[input readString]];
        break;
      }
      case 32: {
        [self setIsHot:[input readInt32]];
        break;
      }
      case 40: {
        [self setCount:[input readInt32]];
        break;
      }
      case 50: {
        MCate_Builder* subBuilder = [MCate builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addList:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return protobufBuilderResult.hasId;
}
- (NSString*) id {
  return protobufBuilderResult.id;
}
- (MCate_Builder*) setId:(NSString*) _value {
  protobufBuilderResult.hasId = YES;
  protobufBuilderResult.id = _value;
  return self;
}
- (MCate_Builder*) clearId {
  protobufBuilderResult.hasId = NO;
  protobufBuilderResult.id = @"";
  return self;
}
- (BOOL) hasImg {
  return protobufBuilderResult.hasImg;
}
- (NSString*) img {
  return protobufBuilderResult.img;
}
- (MCate_Builder*) setImg:(NSString*) _value {
  protobufBuilderResult.hasImg = YES;
  protobufBuilderResult.img = _value;
  return self;
}
- (MCate_Builder*) clearImg {
  protobufBuilderResult.hasImg = NO;
  protobufBuilderResult.img = @"";
  return self;
}
- (BOOL) hasName {
  return protobufBuilderResult.hasName;
}
- (NSString*) name {
  return protobufBuilderResult.name;
}
- (MCate_Builder*) setName:(NSString*) _value {
  protobufBuilderResult.hasName = YES;
  protobufBuilderResult.name = _value;
  return self;
}
- (MCate_Builder*) clearName {
  protobufBuilderResult.hasName = NO;
  protobufBuilderResult.name = @"";
  return self;
}
- (BOOL) hasIsHot {
  return protobufBuilderResult.hasIsHot;
}
- (int32_t) isHot {
  return protobufBuilderResult.isHot;
}
- (MCate_Builder*) setIsHot:(int32_t) _value {
  protobufBuilderResult.hasIsHot = YES;
  protobufBuilderResult.isHot = _value;
  return self;
}
- (MCate_Builder*) clearIsHot {
  protobufBuilderResult.hasIsHot = NO;
  protobufBuilderResult.isHot = 0;
  return self;
}
- (BOOL) hasCount {
  return protobufBuilderResult.hasCount;
}
- (int32_t) count {
  return protobufBuilderResult.count;
}
- (MCate_Builder*) setCount:(int32_t) _value {
  protobufBuilderResult.hasCount = YES;
  protobufBuilderResult.count = _value;
  return self;
}
- (MCate_Builder*) clearCount {
  protobufBuilderResult.hasCount = NO;
  protobufBuilderResult.count = 0;
  return self;
}
- (NSArray*) listList {
  if (protobufBuilderResult.mutableListList == nil) { return [NSArray array]; }
  return protobufBuilderResult.mutableListList;
}
- (MCate*) listAtIndex:(int32_t) index {
  return [protobufBuilderResult listAtIndex:index];
}
- (MCate_Builder*) replaceListAtIndex:(int32_t) index with:(MCate*) _value {
  [protobufBuilderResult.mutableListList replaceObjectAtIndex:index withObject:_value];
  return self;
}
- (MCate_Builder*) addAllList:(NSArray*) values {
  if (protobufBuilderResult.mutableListList == nil) {
    protobufBuilderResult.mutableListList = [NSMutableArray array];
  }
  [protobufBuilderResult.mutableListList addObjectsFromArray:values];
  return self;
}
- (MCate_Builder*) clearListList {
  protobufBuilderResult.mutableListList = nil;
  return self;
}
- (MCate_Builder*) addList:(MCate*) _value {
  if (protobufBuilderResult.mutableListList == nil) {
    protobufBuilderResult.mutableListList = [NSMutableArray array];
  }
  [protobufBuilderResult.mutableListList addObject:_value];
  return self;
}
@end

@interface MCateList ()
@property (retain) NSMutableArray* mutableListList;
@end

@implementation MCateList

@synthesize mutableListList;
- (void) dealloc {
  self.mutableListList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static MCateList* defaultMCateListInstance = nil;
+ (void) initialize {
  if (self == [MCateList class]) {
    defaultMCateListInstance = [[MCateList alloc] init];
  }
}
+ (MCateList*) defaultInstance {
  return defaultMCateListInstance;
}
- (MCateList*) defaultInstance {
  return defaultMCateListInstance;
}
- (NSArray*) listList {
  return mutableListList;
}
- (MCate*) listAtIndex:(int32_t) index {
  id _value = [mutableListList objectAtIndex:index];
  return _value;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (MCate* element in self.listList) {
    [output writeMessage:1 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (MCate* element in self.listList) {
    size += computeMessageSize(1, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MCateList*) parseFromData:(NSData*) data {
  return (MCateList*)[[[MCateList builder] mergeFromData:data] build];
}
+ (MCateList*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MCateList*)[[[MCateList builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MCateList*) parseFromInputStream:(NSInputStream*) input {
  return (MCateList*)[[[MCateList builder] mergeFromInputStream:input] build];
}
+ (MCateList*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MCateList*)[[[MCateList builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MCateList*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MCateList*)[[[MCateList builder] mergeFromCodedInputStream:input] build];
}
+ (MCateList*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MCateList*)[[[MCateList builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MCateList_Builder*) builder {
  return [[[MCateList_Builder alloc] init] autorelease];
}
+ (MCateList_Builder*) builderWithPrototype:(MCateList*) prototype {
  return [[MCateList builder] mergeFrom:prototype];
}
- (MCateList_Builder*) builder {
  return [MCateList builder];
}
@end

@interface MCateList_Builder()
@property (retain) MCateList* protobufBuilderResult;
@end

@implementation MCateList_Builder
@synthesize protobufBuilderResult;
- (void) dealloc {
  self.protobufBuilderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.protobufBuilderResult = [[[MCateList alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return protobufBuilderResult;
}
- (MCateList_Builder*) clear {
  self.protobufBuilderResult = [[[MCateList alloc] init] autorelease];
  return self;
}
- (MCateList_Builder*) clone {
  return [MCateList builderWithPrototype:protobufBuilderResult];
}
- (MCateList*) defaultInstance {
  return [MCateList defaultInstance];
}
- (MCateList*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MCateList*) buildPartial {
  MCateList* returnMe = [[protobufBuilderResult retain] autorelease];
  self.protobufBuilderResult = nil;
  return returnMe;
}
- (MCateList_Builder*) mergeFrom:(MCateList*) other {
  if (other == [MCateList defaultInstance]) {
    return self;
  }
  if (other.mutableListList.count > 0) {
    if (protobufBuilderResult.mutableListList == nil) {
      protobufBuilderResult.mutableListList = [NSMutableArray array];
    }
    [protobufBuilderResult.mutableListList addObjectsFromArray:other.mutableListList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MCateList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MCateList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        MCate_Builder* subBuilder = [MCate builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addList:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSArray*) listList {
  if (protobufBuilderResult.mutableListList == nil) { return [NSArray array]; }
  return protobufBuilderResult.mutableListList;
}
- (MCate*) listAtIndex:(int32_t) index {
  return [protobufBuilderResult listAtIndex:index];
}
- (MCateList_Builder*) replaceListAtIndex:(int32_t) index with:(MCate*) _value {
  [protobufBuilderResult.mutableListList replaceObjectAtIndex:index withObject:_value];
  return self;
}
- (MCateList_Builder*) addAllList:(NSArray*) values {
  if (protobufBuilderResult.mutableListList == nil) {
    protobufBuilderResult.mutableListList = [NSMutableArray array];
  }
  [protobufBuilderResult.mutableListList addObjectsFromArray:values];
  return self;
}
- (MCateList_Builder*) clearListList {
  protobufBuilderResult.mutableListList = nil;
  return self;
}
- (MCateList_Builder*) addList:(MCate*) _value {
  if (protobufBuilderResult.mutableListList == nil) {
    protobufBuilderResult.mutableListList = [NSMutableArray array];
  }
  [protobufBuilderResult.mutableListList addObject:_value];
  return self;
}
@end

